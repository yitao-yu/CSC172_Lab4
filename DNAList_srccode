import java.util.Scanner;
import java.io.*;
public class DNAList {
	//enum gtype, gtype can only be DNA or RNA
	enum gtype{
		DNA, RNA;
	}
	//initialize an Array, Gene, of a Size of 50(MaxSize)
	LList[] array;
    //constructor that literally do nothing
	public DNAList(int size) {
		array = new LList[size];
	}
	
	//insert(pos, type, sequence) initialize an LList and insert it into the array
	public void insert(int pos, gtype type, String sequence) {
		//initialize an LList and store the sequence in it
		LList Gene = new LList<>();
		//the first element of the LList will be a char indicating whether it's RNA or DNA
		switch(type) {
		case DNA:
			Gene.append('d');
			break;
			
		case RNA:
			Gene.append('r');
			break;
		}
		
		boolean insert = true;
		if(sequence != null) {//something I don't understand occured here
		    //use a for loop to append every letter in the sequence to the LList
			//and checking
			
		    for(int i = 0; i < sequence.length() ;i++) {
		    	boolean Errortemp = false;
		    	
				switch(type) {
				case DNA:
					switch(sequence.charAt(i)) {
					case 'A':
						break;
					case 'T':
						break;
					case 'C':
						break;
					case 'G':
						break;
					default:
						Errortemp = true;
						break;
					}
					break;
					
				case RNA:
					switch(sequence.charAt(i)) {
					case 'A':
						break;
					case 'U':
						break;
					case 'C':
						break;
					case 'G':
						break;
					default:
						Errortemp = true;
						break;
					}
					break;
					
				}
				
				//appending or printing
		    	if(Errortemp == false) {
			        Gene.append(sequence.charAt(i));
		    	}
		    	else {
		    		System.out.println("Error occured when Inserting");
		    		insert = false;
		    		break;
		    	}
		    }
		}
		
		
		    
		    
		    //insert this created LList into the array, and move everything backward if the position is already occupied
		    //2/21/2019: now it just insert the LList
		    
		    //if(array[pos] != null) {
			    //for(int i = sequence.length() - 1;i>pos; i--) {
				    //array[i] = array[i - 1];
			    //}
		    //}
		if(insert) {
		    array[pos] = Gene;
		}

	}
	
	//remove(pos) remove the LList object at pos
	public void remove(int pos) {
		//assert that it's not null and if it is, print out a text
//		assert array[pos] != null: "No sequence to remove at specified position";//this didn't work, sorry Andrew...
//		array[pos] = null;
		if(array[pos] != null) {
			array[pos] = null;
		}
		else {
			System.out.println("No sequence to remove at specified position");
		}
	}
	
	//print  print the array in following form pos, gtype ,LList
	public void print() {
		//iterate over the array's elements, the sequence to be printed
		for(int i = 0; i < array.length; i ++) {
			//eliminate the case that the array[i] = null
			if(array[i]!=null) {
			    System.out.print(i+"\t");
			    array[i].moveToStart();
			    if(array[i].getValue().equals('d')) {
				    System.out.print("DNA"+"\t");
			    }
			    else if(array[i].getValue().equals('r')) {
				    System.out.print("RNA"+"\t");
			    }
			    array[i].next();
			    String tempstr = "";
			    do {
				    tempstr = tempstr + array[i].getValue();
				    array[i].next();
			    }while(array[i].getValue() != null);
			    System.out.print(tempstr);
			    System.out.println();
			}
		}
	}
	
	//print(pos) print the sequence in pos position in the array in this format: [type] \t [array]
	public void print(int pos) {
		if(array[pos]==null) {
			System.out.println("No sequence to print at specified position");
		}
		else {
		    array[pos].moveToStart();
		    if(array[pos].getValue().equals('d')) {
			    System.out.print("DNA"+"\t");
		    }
		    else if(array[pos].getValue().equals('r')) {
			    System.out.print("RNA"+"\t");
		    }
		    array[pos].next();
		    String tempstr = "";
		    do {
			    tempstr = tempstr + array[pos].getValue();
			    array[pos].next();
		    }while(array[pos].getValue() != null);
		    System.out.print(tempstr);
		    System.out.println();
		    }
			
		}
	
	
	//clip(pos start end)
	//the type char: start +1. end +1
	public void clip(int pos, int start, int end) {
		//checker #1
		if(start<0) {
			System.out.println("Start index is out of bound");
			return;
		}
		else if(array[pos] == null) {
			System.out.println("No sequence to clip at specified position");
			return;
		}
		
		//End out of bound checker
        //iterate through everything
		int listsize;
		listsize = array[pos].length();
		listsize = listsize - 2;
		
		if(end > listsize) {
			System.out.println("End Index is out of bounds");
			return;
		}
		
		//End Remover
		//We put end remover before the start remover so that start remover wouldn't affect end remover for altering the LList
		array[pos].moveToPos(end+2);
		System.out.println(array[pos].getValue());
		while(array[pos].getValue() != null) {
			array[pos].remove();
			//array[pos].next();	
		}
		//array[pos].next();
		//array[pos].remove();
		
		//start remover
		array[pos].moveToStart();
		array[pos].next();
		for(int i = 1; i<start+1; i++) {
			array[pos].remove();
			//array[pos].next();
		}
	}
	
	//copy(pos1, pos2) copy from pos1 to pos2
		public void copy (int pos1, int pos2) {
			if(array[pos1]==null) {
				System.out.println("No specified sequence to copy at specified position");
			}
			
			else {
				array[pos2] = array[pos1];
			}
		}
	
	
	//transcribe(pos1)
		public void transcribe(int pos1) {
			
		
			
			if(array[pos1]==null) {
				System.out.println("No sequence to transcribe at specified position");
				return;
			}
			if(array[pos1].getValue().equals('r')) {
				System.out.println("Cannot transcribe RNA");
				return;
			}
			
			array[pos1].moveToStart();
			
			array[pos1].remove();
			//array[pos1].prev();
			array[pos1].insert('r');
			
			int size =array[pos1].length();
			//System.out.println(size);
			
			array[pos1].moveToStart();
			
		    for(int i = 0; i < size; i++) {
		    	
		    	//System.out.println("y");
				if(array[pos1].getValue().equals('T')) {
					
					array[pos1].remove();
					//array[pos1].prev();
					array[pos1].insert('U');
					//System.out.println("x");
				}
				array[pos1].next();
				//System.out.println("z");
			
		    }
		}
	
	
	
	//main method that we are going to operate in
    public static void main(String[] args) {
    	int size = Integer.parseInt(args[0]);
    	//int size = 50;
    	DNAList GInfo = new DNAList(size);
     	gtype DNA = gtype.DNA;
    	gtype RNA = gtype.RNA;
    	
    	
    	System.out.println("Enter filename to print its contents");

		try {

		//Scanner scanner2 = new Scanner(System.in);

		File f;

		//f = new File(scanner2.nextLine());
		f = new File(args[1]);

		Scanner scanner = new Scanner (f);

		
		String[]ar = new String[4];
		int i=0;
		while(scanner.hasNextLine()) {
			//int i=0;
			//we have to reset the ar[1], which is normally where we store the position index every single loop
			//in case that the command line was "print" while ar[1] has been passed value to when executing last command line, say "insert 1 RNA AUCG"
			//in the case we afraid of, if we don't reset it, the programe will read that command line as "print 1" 
			//and unintentionally called the print(pos) method instead of print() method
			ar[1] = null;
			
	        while (scanner.hasNext()) {
	            String s = scanner.next();
	            ar[i] = s;
	            i++;
		    }
	        i=0;
	        switch(ar[0]) {
	        case "insert":
	        	//read ar[1]
	        	int pos = Integer.parseInt(ar[1]);
	        	//read ar[2]
	        	switch(ar[2]) {
	        	case "DNA":
	        		GInfo.insert(pos, DNA, ar[3]);
	        		break;
	        	
	        	case "RNA":
	        		GInfo.insert(pos, RNA, ar[3]);
	        		break;
	        	}
	        	break;
	        
	        case "remove":
	        	pos = Integer.parseInt(ar[1]);
	        	GInfo.remove(pos);
	        	break;
	        	
	        case "print":
	        	if(ar[1] == null) {
	        		GInfo.print();
	        	}
	        	else {
	        	    pos = Integer.parseInt(ar[1]);
	        	    GInfo.print(pos);
	        	}
	        	break;
	        
	        case "clip":
	        	pos = Integer.parseInt(ar[1]);
	        	int start = Integer.parseInt(ar[2]);
	        	int end = Integer.parseInt(ar[3]);
	        	GInfo.clip(pos, start, end);
	        	break;
	        
	        case "copy":
	        	int pos1 = Integer.parseInt(ar[1]);
	        	int pos2 = Integer.parseInt(ar[2]);
	        	GInfo.copy(pos1, pos2);
	        	break;
	        	
	        case "transcribe":
	        	pos = Integer.parseInt(ar[1]);
	        	GInfo.transcribe(pos);
	        	break;
	        	
	        default:
	        	System.out.println("Unprocessed Command Line");
	        }
		}
		}

		catch(FileNotFoundException e){

			System.out.println("File does not exist");
    	
    }
} 
}
