import java.util.Scanner;

/*
 * params
 * 
 * Constructor
 * addable for array[][]
 * addable for line[]
 * print
 * checker
 * move : to be completed
 * Gameover
 * gravity
 * mergeline
 * restart: not completely accurately implemented
 * quit: to be implemented
 * numgenerator
 * 
 */
public class NumGame {
    int[][] array = {{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0}};
    //int[][] array = {{4,0,0,0},{8,0,0,0},{4,0,0,0},{4,0,2,0}};//code for testing convenience
	int freespace = 16;
	int step = 0;
	boolean quitted = false;
	
	
	//constructor
	public NumGame() {
		//freespace = 0;//code for testing convenience, don't delete
		this.numgenerator();
		this.numgenerator();
		this.print();
		System.out.println("Show me your next move");
	}
	
	//collide detecter
	private boolean addable(int i , int j ,String dir) {
		switch(dir) {
		
		case"w"://up
			try {
			if(array[i][j] == array[i + 1][j]&&array[i][j]!=0) {
				return true;
			}
			}
			catch(ArrayIndexOutOfBoundsException e) {
				break;
			}
			
			break;
		
		case"a"://left
			try {
			if((array[i][j] == array[i][j + 1])&&array[i][j]!=0) {
				return true;
			}
			}
			catch(ArrayIndexOutOfBoundsException e) {
				break;
			}
			break;
			
		case "s"://down
			try {
			if(array[i][j] == array[i - 1][j]&&array[i][j]!=0) {
				return true;
			}
			}
			catch(ArrayIndexOutOfBoundsException e) {
				break;
			}
			break;
		
	    case"d"://right
		try {
		if(array[i][j] == array[i][j - 1]&&array[i][j]!=0) {
			return true;
		}
		}
		catch(ArrayIndexOutOfBoundsException e) {
			break;
		}
		break;
		}
		return false;
	}
	
	private boolean addable(int[] line, int i , String dir) {
		if(dir.equals("w")||dir.equals("a")) {//condition: up or left, which are both "reverse"
			if(line[i] == line[i + 1] && line[i] != 0) {
				return true;
			}
		}
		else if(dir.equals("s")||dir.equals("d")) {//condition: down or right, which are both "downstream"
			if(line[i] == line[i - 1] && line[i] != 0) {
				return true;
			}
		}
		return false;
	}
	
	//print: we should print the array after we move, restart, or start a new game
	public void print() {
		for(int i =0; i<4;i++) {
			for(int j=0;j<4;j++) {
				    System.out.printf("%4d",array[i][j]);
			}
			System.out.println();
		}
		System.out.println();
		System.out.println("You have moved "+step+" steps");
	}
	
	//checker: checks if the method movement is possible in the specified direction
	public boolean checker(String dir) {
		boolean zerocase = false;//a boolean used to check when there is a 0 if any non-zero element can be moved towards it
		switch(dir) {
		case"w"://up
			for(int i = 0; i<3;i++) {
				for(int j=0;j<4;j++) {
					if(array[i][j] == 0) {
						for(int k = i + 1; k < 4; k++) {
							if(array[k][j] != 0) {
								zerocase = true;
								break;
							}
						}
					}
					if(this.addable(i, j, dir)||zerocase) {
						zerocase = false;
						return true;
					}
				}
			}
			break;
			
		case"a"://left
			for(int i =0; i<4;i++) {
				for(int j = 0 ;j<3; j++) {
					if(array[i][j] == 0) {
						for(int k = j + 1; k < 4; k++) {
							if(array[i][k] != 0) {
								zerocase = true;
								break;
							}
						}
					}
					if(this.addable(i, j, dir)||zerocase) {
					    zerocase = false;
						return true;
					}
				}
			}
			break;
			
		case"s"://down
			for(int i = 3; i>0;i--) {
				for(int j=0;j<4;j++) {
					if(array[i][j] == 0) {
						for(int k = i - 1; k > -1; k--) {
							if(array[k][j] != 0) {
								zerocase = true;
								break;
							}
						}
					}
					if(this.addable(i, j, dir)||zerocase) {
						zerocase = false;
						return true;
					}
				}
			}
			break;
		
		case "d"://right
			for(int i = 0; i<4;i++) {
				for(int j=3;j > 0; j--) {
					if(array[i][j] == 0) {
						for(int k = j - 1; k > -1; k--) {
							if(array[i][k] != 0) {
								zerocase = true;
								break;
							}
						}
					}
					if(this.addable(i, j, dir)||zerocase) {
					    zerocase = false;
						return true;
					}				
				}
			}
			break;
		}
		return false;
	}
	
	//move: this is going to be the nasty part
	//be mindful that we are actually testing it backward
			//so if there's a row{0,2,2,2}
			//we are doing like, the fourth element is addable to third element, and we added them, and we also move it
			//now we move to the third(and we also don't check if now the fourth is addable to third, because for{2,2,2,2} you are going to get {0,0,4,4})
	public void move(String dir) {
		//1st: checker
		if(checker(dir)!=true ) {
			System.out.println("That wasn't a valid move");
			return;
		}
		int[] line = new int[4];
		if(dir.equals("w")||dir.equals("s")) {//cases that we process the column
			for(int j = 0; j < 4; j++) {
				for(int i = 0; i < 4; i ++) {
					line[i] = array[i][j];
				}
				this.gravity(line, dir);
				this.mergeline(line, dir);
				this.gravity(line, dir);
				for(int i = 0; i < 4; i ++) {
					array[i][j] = line[i];
				}
			}
		}
		if(dir.equals("a")||dir.equals("d")) {//cases that we process the row
			for(int i = 0; i < 4; i++) {
				for(int j = 0; j < 4; j ++) {
					line[j] = array[i][j];
				}
				this.gravity(line, dir);
				this.mergeline(line, dir);
				this.gravity(line, dir);
				for(int j = 0; j < 4; j ++) {
					array[i][j] = line[j];
				}
			}
		}
		step ++;
		this.numgenerator();
		print();
		if(!GameOver()) {
		    System.out.println("Show me your next move");
		}
		else {
			System.out.println(" press 'r' to restart, press 'q' to quit.");
		}
	}
	
	public boolean GameOver() {
		//if win: 2048 print: "You have acheived 2048. Good Game!"
		for(int i = 0; i < 4; i ++) {
			for(int j = 0; j < 4; j ++) {
				if(array[i][j] == 2048) {
					System.out.println("You have acheived 2048. Good Game!");
					return true;
				}
			}
		}
		//if lose print: "You have lost. The game is over. press 'r' to restart, press 'q' to quit "
		if(this.checker("w") || this.checker("a") || this.checker("s") || this.checker("d")) {
		}
		else {
			System.out.println("You have lost. The game is over!");
			return true;
		}
		
		return false;
	}
	
	public void gravity(int[] line, String dir) {
		if(dir.equals("w")||dir.equals("a")) {//condition: up or left, which are both "reverse"
			for(int i = 3; i > 0; i --) {
				if(line[i - 1] == 0) {
					line[i - 1] = line[i];
					line[i] = 0;
					for(int j = i+1; j < 4; j++) {
						if(line[j - 1] == 0) {
							line[j - 1] = line[j];
							line[j] = 0;
					    }
				    }
			    }
		    }
		}
		else if(dir.equals("s")||dir.equals("d")) {//condition: down or right, which are both "downstream"
			for(int i = 0; i < 3; i ++) {
				if(line[i + 1] == 0) {
					line[i + 1] = line[i];
					line[i] = 0;
					for(int j = i-1; j>=0; j--) {
						if(line[j + 1] == 0) {
							line[j + 1] = line[j];
							line[j] = 0;
					    }
				    }
			    }
		    }
		}
	}
	
	public void mergeline(int[] line, String dir) {
		if(dir.equals("w")||dir.equals("a")) {//condition: up or left, which are both "reverse"
			for(int i = 0; i < 3; i ++) {
				if(addable(line,i,dir)) {
					line[i + 1] = 2*line[i];
					line[i] = 0;
					i = i + 1;
					freespace++;
				}
		    }
		}
		else if(dir.equals("s")||dir.equals("d")) {//condition: down or right, which are both "downstream"
			for(int i = 3; i > 0; i --) {
				if(addable(line,i,dir)) {
					line[i - 1] = 2*line[i];
					line[i] = 0;
					i = i - 1;
					freespace++;
				}
		    }
		}
	}
	
	//restart
	//need to make user confirm before restart
	public void restart() {
		
		for(int i =0; i<4;i++) {
			for(int j=0;j<4;j++) {
				array[i][j] = 0;
			}
		}
		freespace = 16;
		step = 0;
		this.numgenerator();
		this.numgenerator();
		this.print();
		System.out.println("Show me your next move");
	}
	
	//quiter: I don't know what that is yet, prof wants it though
	public void quit() {
		this.quitted = true;
		for(int i =0; i<4;i++) {
			for(int j=0;j<4;j++) {
				array[i][j] = 0;
			}
		}
		freespace = 16;
		step = 0;
		System.out.println("See you next time! Goodluck in life! 2048 will always be here for you! WE LOVE YOU!!");
	}
	
	//num generator
	public void numgenerator() {
		if(freespace > 0) {
		//where to generate
		int i = (int)(4*Math.random());
		int j = (int)(4*Math.random());
		while(array[i][j] != 0) {
			i = (int)(4*Math.random());
			j = (int)(4*Math.random());
		}

		//put 2 or 4 at the place
		if(Math.random()>0.2)
		    array[i][j] = 2;
		else
			array[i][j] = 4;
		freespace--;
		}
	}
	//main
	public static void main(String[] args) {
		System.out.println("Welcome to 2048 Game! Use a,s,d and w to move left, down,right and up respectively");
		System.out.println("Use q to quit and r to restart");
		
		Scanner scanner = new Scanner(System.in);
		NumGame G2048 = new NumGame();
		String input;
		while(G2048.quitted == false) {
				loop:
				while(G2048.GameOver() == false && G2048.quitted == false) {
			        input = scanner.nextLine();
				    if(input.equals("w")||input.equals("a")||input.equals("s")||input.equals("d")) {
					    G2048.move(input);
				    }
				    else {
					    switch(input) {
					    case "q":
					    	System.out.println("Sure to Quit? (Y/N)");
					    	input = scanner.nextLine();
					    	if(input.equals("y")) {
						    G2048.quit();
						    scanner.close();
					    	}
					    	else{
					    		System.out.println("Restart or Quit");
					    		continue loop;
					    	}
						    break;
						
					    case "r":System.out.println("Sure to Restart? (Y/N)");
				    	input = scanner.nextLine();
				    	if(input.equals("y")) {
					    G2048.restart();
					    System.out.println("Show me Your move");
				    	}
				    	else{
				    		System.out.println("Restart ot Quit?");
				    	}
					    	continue loop;
						
					    default:
						    break;
					    }
				    }
				}
				
				//something should be done here
				if(G2048.GameOver()==true) {
					 input = scanner.nextLine();
					
					switch(input) {
					case "q" :
						System.out.println("Are you sure you want to quit? y =Yes/ n = No");
						input = scanner.nextLine();
						if(input.equals("y")) {
							G2048.quit();
							scanner.close();
						}
						else {
						}
						
						
						break;
					case "r" :
						System.out.println("Are you sure you want to restart this game?  y =Yes/ n = No");
						input = scanner.nextLine();
						if(input.equals("y")) {
							G2048.restart();
							System.out.println("Show me your move");
						}
						else {
						
						}
						break;	

					}
				}
			}
		}
    }



